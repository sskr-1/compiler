================================================================================
           LLVM IR CODE GENERATOR FOR C-LIKE LANGUAGE
================================================================================

PROJECT INFORMATION
-------------------
Name: C-like Language Compiler
Type: LLVM IR Code Generator
Language: C++17
Target: LLVM IR (Intermediate Representation)
Version: 1.0

STATISTICS
----------
Source Files: 7 (.cpp and .h files)
Lines of Code: ~1,279 lines
Example Programs: 5
Documentation Files: 4
Build Size: ~40 MB (includes LLVM dependencies)

FILES STRUCTURE
---------------
Core Implementation:
  â”œâ”€â”€ ast.h              - AST node definitions (195 lines)
  â”œâ”€â”€ codegen.h          - Code generation context (75 lines)
  â”œâ”€â”€ codegen.cpp        - LLVM IR generation (366 lines)
  â”œâ”€â”€ lexer.h            - Tokenizer/Lexer (158 lines)
  â”œâ”€â”€ parser.h           - Recursive descent parser (369 lines)
  â””â”€â”€ main.cpp           - Driver program (56 lines)

Build Configuration:
  â”œâ”€â”€ CMakeLists.txt     - CMake build configuration
  â”œâ”€â”€ Makefile           - Convenience targets
  â””â”€â”€ build.sh           - Build script

Testing:
  â””â”€â”€ test_compiler.sh   - Comprehensive test suite

Documentation:
  â”œâ”€â”€ README.md          - User guide and features
  â”œâ”€â”€ QUICKSTART.md      - 5-minute getting started
  â”œâ”€â”€ ARCHITECTURE.md    - Technical architecture details
  â””â”€â”€ SUMMARY.md         - Project summary

Examples:
  â”œâ”€â”€ simple.c           - Basic arithmetic
  â”œâ”€â”€ factorial.c        - Recursive function
  â”œâ”€â”€ fibonacci.c        - Iterative loop
  â”œâ”€â”€ control_flow.c     - If/else and while
  â””â”€â”€ float_ops.c        - Floating point operations

FEATURES
--------
âœ“ Lexical analysis and tokenization
âœ“ Recursive descent parser with operator precedence
âœ“ Abstract Syntax Tree (AST) construction
âœ“ LLVM IR code generation
âœ“ Type system (int, float, double, void)
âœ“ Arithmetic operators (+, -, *, /)
âœ“ Comparison operators (<, >, <=, >=, ==, !=)
âœ“ Control flow (if/else, while)
âœ“ Functions with parameters
âœ“ Function calls and recursion
âœ“ Variable declarations and assignments
âœ“ Return statements
âœ“ Automatic type conversions
âœ“ IR verification

SUPPORTED LANGUAGE CONSTRUCTS
------------------------------
Data Types:
  â€¢ int     - 32-bit signed integer
  â€¢ float   - Single precision floating point
  â€¢ double  - Double precision floating point
  â€¢ void    - No return value

Operators:
  â€¢ Arithmetic: + - * /
  â€¢ Comparison: < > <= >= == !=
  â€¢ Unary: - (negation) ! (logical not)
  â€¢ Assignment: =

Control Flow:
  â€¢ if (condition) { } else { }
  â€¢ while (condition) { }
  â€¢ return expression;

Functions:
  â€¢ int functionName(int param1, double param2) { }
  â€¢ Function calls: result = functionName(arg1, arg2);
  â€¢ Recursion supported

QUICK START
-----------
1. Build:
   ./build.sh

2. Compile a program:
   ./build/compiler examples/factorial.c factorial.ll

3. Run:
   lli-20 factorial.ll
   echo $?

4. Run tests:
   ./test_compiler.sh

EXAMPLE USAGE
-------------
Input (factorial.c):
  int factorial(int n) {
      if (n < 2) {
          return 1;
      }
      return n * factorial(n - 1);
  }
  
  int main() {
      return factorial(5);
  }

Output (factorial.ll):
  define i32 @factorial(i32 %n) {
  entry:
    %n1 = alloca i32, align 4
    store i32 %n, ptr %n1, align 4
    %n2 = load i32, ptr %n1, align 4
    %cmptmp = icmp slt i32 %n2, 2
    ...
    ret i32 %multmp
  }

Execution:
  $ lli-20 factorial.ll
  $ echo $?
  120

TEST RESULTS
------------
âœ“ Simple arithmetic      - Returns 50
âœ“ Factorial recursion    - Returns 120
âœ“ Fibonacci iteration    - Returns 55
âœ“ Control flow           - Returns 106
âœ“ Floating point ops     - Returns 0

All tests: PASSED

TECHNICAL DETAILS
-----------------
Parser Type: Recursive Descent with Operator Precedence Climbing
Memory Management: Modern C++ (std::unique_ptr, RAII)
LLVM API: C++ API (not C bindings)
IR Format: Human-readable LLVM IR (.ll files)
Optimization: Generates unoptimized IR (can be optimized with opt)

Operator Precedence:
  1. Assignment (=)           - Precedence 2
  2. Equality (==, !=)        - Precedence 10
  3. Comparison (<, >, <=, >=)- Precedence 20
  4. Addition/Subtraction     - Precedence 30
  5. Multiplication/Division  - Precedence 40

DEPENDENCIES
------------
Required:
  â€¢ LLVM 20.x development libraries
  â€¢ CMake 3.13+
  â€¢ C++17 compatible compiler (Clang/GCC)
  â€¢ Standard C++ library

Optional (for execution):
  â€¢ lli - LLVM interpreter
  â€¢ llc - LLVM static compiler
  â€¢ opt - LLVM optimizer

COMPILATION PIPELINE
--------------------
Source Code (.c)
    â†“
[Lexer] â†’ Token Stream
    â†“
[Parser] â†’ Abstract Syntax Tree (AST)
    â†“
[Code Generator] â†’ LLVM IR Module
    â†“
LLVM IR (.ll)
    â†“
[LLVM Tools: lli/llc/opt]
    â†“
Machine Code / Execution

PERFORMANCE
-----------
Compilation Speed (typical):
  â€¢ Parsing: < 1 ms
  â€¢ Code Generation: < 5 ms
  â€¢ Total: < 10 ms (for small programs)

Generated IR Size:
  â€¢ Simple program (10 lines): ~500 bytes
  â€¢ Factorial example: ~900 bytes
  â€¢ Control flow example: ~2.2 KB

LIMITATIONS
-----------
By design (for simplicity):
  âœ— No preprocessor
  âœ— No include files
  âœ— No arrays or pointers
  âœ— No structs/classes
  âœ— No string literals
  âœ— No standard library
  âœ— No break/continue
  âœ— No for loops (only while)
  âœ— No switch statements
  âœ— No type inference

EXTENSIBILITY
-------------
Easy to add:
  â€¢ New operators (modify lexer, parser, codegen)
  â€¢ New statements (add AST node and handlers)
  â€¢ New types (extend type system)

Moderate effort:
  â€¢ Arrays and pointers
  â€¢ Structs
  â€¢ For loops

Significant effort:
  â€¢ Standard library
  â€¢ Module system
  â€¢ Generic programming

EDUCATIONAL VALUE
-----------------
This project demonstrates:
  âœ“ Compiler frontend construction
  âœ“ Lexical analysis techniques
  âœ“ Parsing algorithms
  âœ“ AST design patterns
  âœ“ LLVM integration
  âœ“ Type system implementation
  âœ“ Control flow generation
  âœ“ Symbol table management
  âœ“ Modern C++ practices

FURTHER READING
---------------
â€¢ README.md         - Complete user guide
â€¢ QUICKSTART.md     - Get started in 5 minutes
â€¢ ARCHITECTURE.md   - Deep technical dive
â€¢ SUMMARY.md        - Project summary

â€¢ LLVM Documentation: https://llvm.org/docs/
â€¢ LLVM Tutorial: https://llvm.org/docs/tutorial/

AUTHOR & LICENSE
----------------
Created: October 2025
Purpose: Educational LLVM IR code generation demonstration
License: Educational use

================================================================================
                        Happy Compiling! ðŸš€
================================================================================
